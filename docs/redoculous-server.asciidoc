
Redoculous is a simple Markup language preview and publishing server - edit 
documents locally in real-time, and publish instantly to the web
with a few small snippits of HTML. Designed for handling multiple
versions of documents, publishing directly from source has never 
been easier. Just use a little basic HTML to add a Redoculous pane
to any web page, and include the required scripts to publish
your documentation instantly.

=== Install Redoculous
In order to set up a Redoculous server, you must:

1. Get a recent https://oss.sonatype.org/content/repositories/snapshots/org/ocpsoft/redoculous-server/[Snapshot] 
or http://search.maven.org/#search%7Cga%7C1%7Credoculous-server[Release] of the application WAR file. 

2. Deploy the packaged WAR file to a Java Servlet Container or Application Server of your 
choice.

3. Access either the link:#_local_preview_mode[Local Preview] or 
link:#_published_mode[Published] modes. 

4. Check out the Redoculous link:#_redoculous_rest_api[REST API].

=== Local Preview Mode

If you have deployed Redoculous to a local server, you may now preview documents from
the local file-system in real time; each time Redoculous detects a file, the document
will be updated in the browser.

To begin, simply direct your browser the local server where you have deployed
Redoculous, and provide the path to the file you wish to preview.

[source,url]
.Linux and OSX URL
----
http://localhost:8080/redoculous/preview?
   path=file:///home/username/projects/docs/index.asciidoc
----

Note, make sure to use the appropriate +file://+ path for your operating system. On
Windows, this would look like the URL below

[source,url]
.Windows URL
----
http://localhost:8080/redoculous/preview?
   path=file://c:/Documents+and+Settings/username/projects/docs/index.asciidoc
----

TIP: When using Local Preview Mode, HTML links are updated to ensure that related 
documents can be accessed from the same Local Preview window. Just click a link
to preview the next document.

=== Published Mode

Once you are ready to publish your documentation, you can do so using Publish Mode,
which is the primary method for displaying fully rendered documents on your website.

First, you will need to deploy redoculous to a public server, such as the 
link:http://www.openshift.com[OpenShift] cloud, which offers free hosting that far
exceeds the minimum requirements to run Redoculous.

Once you have deployed Redoculous, you now need to display your documents in the
target website. This is done using standard HTML and a few JavaScript includes.

TIP: Required JavaScript files are provided by the Redoculous server in the +js/+, 
directory, so look there before attempting to download any scripts. You may also
provide your own copies of the script files if desired. 

[source,html]
.Using Redoculous.js and a DIV element:
----
<!DOCTYPE html>
<html>
<head>
<title>Redoculous Example</title>
<meta http-equiv="Content-Type" content="text/html; charset=US-ASCII">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<link rel="stylesheet" href="css/asciidoctor.css">
<script src="js/jquery.min.js"></script>
<script src="js/jquery.history.min.js"></script>
<script src="js/redoculous.js"></script>
</head>
<body>
	<div 
	    data-redoculous="http://localhost:8080/redoculous"
		data-repo="https://github.com/ocpsoft/redoculous.git"
		data-ref="master"
		data-repo-root="/docs" 
		data-root="/redoculous/docs">
	</div>
</body>
</html>
----

Now that you have the basic HTML and JavaScript set up, you should review the attributes
below to make sure that your configuration is correct. If you have set up the page
correctly, your documents will appear after a brief initial delay. (Caching is provided,
so once a page has loaded, it will be served much more quickly on subsequent requests.)

== Configuration attributes

NOTE: All configuration attributes are required unless otherwise specified.

data-redoculous:: Creates a content pane where selected documents will be rendered
and specifies the URL of the Redoculous server that will handle document requests.
This pane will inherit all CSS and styles from the page in which it resides, just
like a normal HTML element.
+
--
For example, if your Redoculous server is located at http://redoculous.io/, you would 
use the following +data-redoculous+ configuration:
[source,html]
----
<div data-redoculous="http://redoculous.io" ... >
----
However, if you are running a local server, on port 8080 under the context-root 
+/redoculous+, then you would use the following configuration:
[source,html]
----
<div data-redoculous="http://localhost:8080/redoculous" ... >
----
--
data-repo:: Specifies the git repository URL from which this pane will display rendered
documents.
+
For example, if your un-rendered documents are hosted on link:http://github.com/[GitHub],
then you would use the HTTPS repository URL in your +data-repo+ configuration.
+
[source,html]
----
<div ... data-repo="https://github.com/ocpsoft/redoculous.git" ... >
----

data-ref:: Specifies the git ref from which this pane will display rendered documents.
+
For example, if your wish to display documents from a specific release tag, say +2.0.0.Final+,
then you would simply set the tag name in your +data-ref+ configuration.
+
[source,html]
----
<div ... data-ref="2.0.0.Final" ... >
----

data-repo-root:: Specifies the root path of the git repository from which to display rendered documents.
+
For example, if your wish to display documents from a sub-folder in the configured repo, you
would set the sub-folder path in your +data-repo-root+ configuration.
+
[source,html]
----
<div ... data-ref="2.0.0.Final" ... >
----

data-root:: Specifies the root URL from which documents may be accessed on the server.
+
For example, if you host your documents at the root URL http://ocpsoft.org/project/docs/,
you would set the absolute path to the documents root page in your +data-root+ configuration,
making sure to use the full path -- excluding query-parameters. 
+
[source,html]
----
<div ... data-root="/project/docs/" ... >
----

data-onload:: Specifies a fragment of JavaScript to execute after each document has
loaded.
+
For example, if you wish to call a JavaScript function after displaying each document,
simply pass the function you wish to call in the +data-onload+ configuration. 
+
[source,html]
----
<div ... data-onload="alert('Document loaded!');" ... >
----

That's it! You should now see your documents rendered in place of the +data-redoculous+
 element.

== Redoculous REST API

=== POST /update

There are 'two ways' to update published documentation once it has been rendered. The first
approach is to simply restart the Redoculous server, which will cause the cache to be
cleared. The second approach is to submit a JSON payload to the +POST /update+ URL
on which Redoculous listens for updates.

This can be done either using a web-service client, a REST browser client, or
using link:https://help.github.com/articles/post-receive-hooks[GitHub web-hook URLs],
which would ensure that your documentation is updated automatically.

The update payload should be in the following format '(ensure that your POST URL is
the URL at which your Redoculous server is published)':

[source,text]
----
HTTP/1.1 POST http://localhost:8080/redoculous/update
---
payload={ "repository" : { 
             "url" : "https://github.com/ocpsoft/redoculous.git" 
          }
}
----

This will cause Redoculous to pull all new changes from the repository URL, and clear
the document cache so that new versions of documents will be served. 

TIP: You so not need to update your website or HTML, as the latest content is always
requested from the Redoculous cache. 
 
== Support
If you are having difficulty with Redoculous, please visit the
link:http://ocpsoft.org/support/redoculous-users/[Redoculous Users Forum]
and post a question. We will respond as quickly as possible.
 
== Get involved
Project homepage:: http://ocpsoft.org/redoculous/
Source-code:: http://github.com/ocpsoft/redoculous
Twitter:: http://twitter.com/ocpsoft




